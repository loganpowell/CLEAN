# This "input" configures a global authorization rule to
# enable public access to all models in this schema. Learn
# more about authorization rules here:
# https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!
# A Node can either be a branch or a leaf. Therefore
# presentations will vary. NodeType is used to display
# edge-connected nodes or a single node E.g., if a course -
# would be WEB_SERIES, inferring that the connected nodes
# are to be presented as an ordered list (handled
# client-side)
# NodeType is coupled to any child Assets this is what
# the client peeks to figure out how to present the Assets
# upon scaffolding, the client will send a batch graphql
# mutation to instantiate the assets in the correct order
# (Array): See Component schemas below. WARNING: This list
# will grow over time... substantially

enum NodeType {
  # --- ðŸ”» REQUIRED: DO NOT REPLACE/REMOVE ðŸ”» ---
  R_ACCOUNT
  # --- ðŸ”º REQUIRED: DO NOT REPLACE/REMOVE ðŸ”º ---

  # Web App/Site
  WEB_LANDING
  WEB_SERIES # triggers EdgeType HAS_NEXT
  WEB_COLLECTION
  WEB_META
  WEB_SLAB

  # UI Components
  CMP_TABLE

  # Data
  DIR # Directory/folder
  COL_LIST
  COL_DICT
  COL_SERIES
}

# ðŸ”’ auth: see authorization docs for implementation of group
# claims for public (unathenticated/guest) users:
# https://docs.aws.amazon.com/appsync/latest/devguide/security-authorization-use-cases.html
# ctrl+f "claims"
#
# also, this blog
# https://literal.io/writing/implementing-guest-authentication-with-amplify-cognito-appsync

# When deleting a Node, an aliased gql batch mutation should
# be composed of all the existing edges connecting to it
# (Alert user of the edges about to be destroyed)
# variable access

type Node
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner, ownerField: "owner" } #   identityClaim: "email"   },
      { allow: owner, operations: [read, update], ownerField: "editors" }
      { allow: owner, operations: [read], ownerField: "readers" }
      { allow: groups, operations: [read, update], groupsField: "editorGroups" }
      { allow: groups, operations: [read], groupsField: "readerGroups" }
      { allow: groups, groups: ["CRUD"] }
      { allow: groups, operations: [create, read, update], groups: ["CRU"] }
      { allow: groups, operations: [create, read], groups: ["CR"] }
      { allow: groups, operations: [read], groups: ["R"] }
      { allow: public, operations: [read], provider: iam }
    ]
  ) {
  id: ID! @primaryKey
  editors: [String]
  readers: [String]
  editorGroups: [String]
  readerGroups: [String]
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  ledgerID: ID
  ledger: Ledger @hasOne(fields: ["ledgerID"])
  objects: [Edge] @hasMany(indexName: "Objects_by_subject", fields: ["id"])
  subjects: [Edge] @hasMany(indexName: "Subjects_by_object", fields: ["id"])
  name: String
  index: Int @default(value: "0")
  type: NodeType!
  status: NodeStatus!
    @index(
      name: "Nodes_by_status_type_updatedAt"
      queryField: "nodesByStatusType"
      sortKeyFields: ["type", "updatedAt"]
    )
  owner: String
    @index(
      name: "Nodes_by_owner_status_updatedAt"
      queryField: "nodesByOwnerStatus"
      sortKeyFields: ["status", "updatedAt"]
    )
    @index(
      name: "Nodes_by_owner_type_updatedAt"
      queryField: "nodesByOwnerType"
      sortKeyFields: ["type", "updatedAt"]
    )
  assets: [Asset] @hasMany(indexName: "Assets_by_node", fields: ["id"])
}

enum NodeStatus {
  DELETED
  PRIVATE
  PUBLIC
  REMOVED
  REPLACED
  SHARED
}

# Before instantiating an Edge, both connecting Nodes must
# first exist or - at least - their IDs must be known
type Edge
  @model(subscriptions: null)
  @auth(
    rules: [
      { allow: owner, ownerField: "owner" } #   identityClaim: "email"   },
      { allow: owner, operations: [read, update], ownerField: "editors" }
      { allow: owner, operations: [read], ownerField: "readers" }
      { allow: groups, operations: [read, update], groupsField: "editorGroups" }
      { allow: groups, operations: [read], groupsField: "readerGroups" }
      { allow: groups, groups: ["CRUD"] }
      { allow: groups, operations: [create, read, update], groups: ["CRU"] }
      { allow: groups, operations: [read, update], groups: ["RU"] }
      { allow: groups, operations: [create, read], groups: ["CR"] }
      { allow: groups, operations: [read], groups: ["R"] }
      { allow: public, operations: [read], provider: iam }
    ]
  ) {
  editors: [String]
  readers: [String]
  editorGroups: [String]
  readerGroups: [String]
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  objectID: ID! @index(name: "Objects_by_subject", sortKeyFields: ["weight", "createdAt"])
  object: Node @belongsTo(fields: ["objectID"])
  subjectID: ID! @index(name: "Subjects_by_object", sortKeyFields: ["weight", "createdAt"])
  subject: Node @belongsTo(fields: ["subjectID"])
  id: ID! @primaryKey
  type: EdgeType
    @index(name: "Edges_by_type", queryField: "edgesByType", sortKeyFields: ["updatedAt"])
  owner: String
    @index(
      name: "Edges_by_owner_type"
      queryField: "edgesByOwnerType"
      sortKeyFields: ["type", "updatedAt"]
    )
  weight: Int @default(value: "0")
}

# PUBLIC ACCESS | queries: null
type Asset
  @model(queries: { get: null }) # removes `id` from graphql API
  @auth(
    rules: [
      { allow: owner, ownerField: "owner" } #   identityClaim: "email"   },
      { allow: groups, groups: ["CRUD"] }
      { allow: groups, operations: [create, read, update], groups: ["CRU"] }
      { allow: groups, operations: [read, update], groups: ["RU"] }
      { allow: groups, operations: [create, read], groups: ["CR"] }
      { allow: groups, operations: [read], groups: ["R"] }
      { allow: public, operations: [read], provider: iam }
    ]
  ) {
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  nodeID: ID! @index(name: "Assets_by_node", sortKeyFields: ["index"])
  node: Node @belongsTo(fields: ["nodeID"])
  id: ID! @primaryKey
  key: String!
  index: Int @default(value: "0")
  type: AssetType!
  value: String
}

#private and admin access (analytics)
type Ledger
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, read], ownerField: "owner" } #   identityClaim: "email"   }
      { allow: groups, operations: [create, read], groups: ["CRUD", "CRU", "CR"] }
    ]
  ) {
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  nodeID: ID! @index(name: "Ledger_by_node")
  # bidirectional "hasOne" relationship cannot be represented
  # in iOS (analtics won't be mobile)
  node: Node @belongsTo(fields: ["nodeID"])
  events: [Event] @hasMany(indexName: "Events_by_ledger")
}

# Events contain the graphql queries/mutations/etc that are
# sent in relation to the Node. This also enables "undo" by
# rolling back to a prior state. I.E., all "owner"-initiated
# events are scoped to a Node
#
# Via DynamoDB Stream on Edge:
# If an Edge is created, both Nodes' Ledger is updated to
# reflect the Edge addition.
type Event
  @model
  @auth(
    rules: [
      { allow: owner, operations: [create, read], ownerField: "owner" }
      { allow: groups, operations: [create, read], groups: ["CRUD", "CRU", "CR"] }
    ]
  ) {
  id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  ledgerID: ID! @index(name: "Events_by_ledger")
  ledger: Ledger @belongsTo(fields: ["ledgerID"])
  type: EventType!
  payload: String!
}

enum EdgeType {
  # Human to Asset
  AUTHORED
  # Sibling/Sequence
  HAS_NEXT
  # Hierachical
  HAS_CHILD
}

# component schemas:
# - page templates are paired with a specific json schema
#   that configure the Assets
# - each different page relates to a different ContentType.
#   By creating that NodeType
# - the json schema is an Object with keys that will be used
#   as form fields and the values the AssetType (mapped to
#   an Array as Object.entries)
enum AssetType {
  # Documentation #############################
  """
  A [description](http://spec.graphql.org/June2018/#sec-Descriptions),
  here in parentheses, is `markdown` friendly!
  """
  DEPRECATED @deprecated(reason: "the reason is _also_ `markdown` friendly!")

  # Multimedia Assets ##############################
  TXT_TXT
  TXT_CSV
  TXT_CSS
  TXT_HTML
  TXT_XML
  TXT_ICS

  IMG
  IMG_TIFF
  IMG_JPEG
  IMG_JPG
  IMG_GIF
  IMG_PNG
  IMG_BMP
  IMG_SVG
  IMG_WEBP

  AUD
  AUD_WEBA
  AUD_AAC
  AUD_MP3
  AUD_WAV
  AUD_OGA
  AUD_OPUS

  VID
  VID_WEBM
  VID_MP4
  VID_OGV
  VID_AVI
  VID_TS
  VID_MPEG

  APP_JSON
  APP_JSONLD
  APP_RTF
  APP_PDF
  APP_DOC
  APP_DOCX
  APP_XLS
  APP_XLSX
  APP_PPT
  APP_ODP
  APP_ODS
  APP_ODT
  APP_ICO

  ZIP_ZIP
  ZIP_RAR
  ZIP_7Z

  # open graph âš  needs client-side validation (custom UI) for optimal/max char length
  # optimal   | max
  OG_TITLE # 55        | 95
  OG_DESCRIPTION # 55        | 200
  OG_TYPE
  OG_IMAGE # open graph (https://ogp.me/#metadata)
  OG_AUDIO
  OG_VIDEO

  # Text (Markdown enabled) #######################
  MD_LONG
  MD_SHORT
  MD_LEDE

  # Meta: each tag must be a separate resource-type in order for it to be able to be searched by
  META_DATA
  META_MAP
  META_VIZ
  META_API

  # Files ######################################
  FILE
  FILE_PDF
  FILE_KML
  FILE_SHP
  FILE_CSV
  FILE_JSON
}

enum EventType {
  CREATE
  READ
  UPDATE
  DELETE
}

#                              888   _                   /
#  888-~88e    /~~~8e   e88~~\ 888 e~ ~    /~~~8e  e88~88e  e88~~8e   d88~\
#  888  888b       88b d888    888d8b          88b 888 888 d888  88b C888
#  888  8888  e88~-888 8888    888Y88b    e88~-888 "88_88" 8888__888  Y88b
#  888  888P C888  888 Y888    888 Y88b  C888  888  /      Y888    ,   888D
#  888-_88"   "88_-888  "88__/ 888  Y88b  "88_-888 Cb       "88___/  \_88P
#  888                                              Y8""8D

# Package implementations connect a Node to it's component in
# order to enable different authorization schemes for Nodes.
# Due to the limitations of AWS Amplify's authorization
# model:
# - dynamic groups:
#   - disables subscriptions on the item
#   - must create a pre token generation lambda to have >
#     500 Cognito groups
#   - doesn't work with DataStore
# - dynamic "owner" arrays (more than one)
#   - disables subscriptions on the item
#
# Due to these limitations, this intermediary enables
# dynamic groups and owners, but delegates
# subscription-sensitive component to a separate table
# (component), which doesn't have these dynamic settings. The
# intermediary item also serves to decouple the component from
# the Node in order to be able to change the permissions
# scheme (e.g., from public to private or vice-versa) by
# repackaging the same component into a package with a
# deferent scheme. It also allows component to
